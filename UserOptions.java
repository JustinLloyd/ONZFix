public class UserOptions
	{
	private final static short	k_MAX_CART_TITLE_LEN = 16 ;
	
	private	boolean	m_optPadImage ;								// pad image option flag
	private boolean	m_optDebugOnly ;							// debug only option flag
	private boolean	m_optValidateImage ;						// validate rom image option flag
	private boolean m_optCartTitle ;							// set cartridge title option flag
	private boolean m_optTruncateImage ;						// truncate rom image option flag
	private boolean m_optGBCCompatibility ;						// set gbc compatibility mode option flag
	private boolean m_optGBCOnly ;								// set gbc only mode option flag
	private boolean m_optRAMSize ;								// set rom image ram size option flag
	private boolean m_optMBCType ;								// set rom image mbc type option flag
	private boolean m_optNewLicensee ;							// set licensee option flag
	private boolean m_optCountryCode ;							// set country code option flag
	private boolean m_optSGBOptions ;							// set super gameboy option flag
	private boolean m_optVersion ;								// set version option flag
	private boolean m_optLicensee ;								// set licensee option flag
	
	private	short	m_padValue ;								// pad value to set if rom image requires padding to the next size
	private	short	m_ramSize ;									// ram size to set in rom image
	private	short	m_mbcType ;									// mbc type to set in rom image
	private	long	m_newLicensee ;								// new two byte licensee code to set in rom image
	private short	m_countryCode ;								// new country code to set in rom image
	private short	m_sgbOptions ;								// new sgb options to set in rom image
	private short	m_version ;									// new version number to set in rom image
	private short	m_licensee ;								// new licensee code to set in rom image

	private String	m_errorMsg ;								// string of last error generated by this class
	private String	m_cartridgeTitle ;							// cartridge title if specified
	private String	m_romImageFilename ;						// filename of rom image
	
	
	/****************************************************************
	* NAME: UserOptions (constructor)								*
	*																*
	*																*
	****************************************************************/
	
	public UserOptions()
		{
		m_errorMsg = "No error" ;
		m_optPadImage = false ;
		m_optDebugOnly = false ;
		m_optValidateImage = false ;
		m_optCartTitle = false ;
		m_optTruncateImage = false ;
		m_optGBCCompatibility = false ;
		m_optGBCOnly = false ;
		m_optRAMSize = false ;
		m_optMBCType = false ;
		m_optNewLicensee = false ;
		m_optCountryCode = false ;
		m_optSGBOptions = false ;
		m_optVersion = false ;
		m_optLicensee = false ;
		
		m_romImageFilename = "" ;
		m_cartridgeTitle = "" ;
		m_padValue = 0 ;
		m_ramSize = 0 ;
		m_mbcType = 0 ;
		m_newLicensee = 0 ;
		m_countryCode = 0 ;
		m_sgbOptions = 0 ;
		m_version = 0 ;
		m_licensee = 0 ;
		}
	
	
	/****************************************************************
	* NAME: isPadImage (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public boolean isPadImage()
		{
		return (m_optPadImage) ;
		}
	
	
	/****************************************************************
	* NAME: isTruncateImage (of UserOptions)						*
	*																*
	*																*
	****************************************************************/

	public boolean isTruncateImage()
		{
		return (m_optTruncateImage) ;
		}
	

	/****************************************************************
	* NAME: getPadValue (of UserOptions)							*
	*																*
	*																*
	****************************************************************/
	
	public byte getPadValue()
		{
		return (new Short(m_padValue).byteValue()) ;
		}
	
	
	/****************************************************************
	* NAME: isMBCType (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public boolean isMBCType()
		{
		return (m_optMBCType) ;
		}
	
	
	/****************************************************************
	* NAME: getMBCType (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public byte getMBCType()
		{
		return (new Short(m_mbcType).byteValue()) ;
		}
	
	
	/****************************************************************
	* NAME: isValidateImage (of UserOptions)						*
	*																*
	*																*
	****************************************************************/
	
	public boolean isValidateImage()
		{
		return (m_optValidateImage) ;
		}
	

	/****************************************************************
	* NAME: isRAMSize (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public boolean isRAMSize()
		{
		return (m_optRAMSize) ;
		}
	

	/****************************************************************
	* NAME: getRAMSize (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public byte getRAMSize()
		{
		return (new Short(m_ramSize).byteValue()) ;
		}
	
	
	/****************************************************************
	* NAME: isDebugOnly (of UserOptions)							*
	*																*
	*																*
	****************************************************************/
	
	public boolean isDebugOnly()
		{
		return (m_optDebugOnly) ;
		}
	
	
	/****************************************************************
	* NAME: isCartridgeTitle (of UserOptions)						*
	*																*
	*																*
	****************************************************************/
	
	public boolean isCartridgeTitle()
		{
		return (m_optCartTitle) ;
		}

	
	/****************************************************************
	* NAME: getCartridgeTitle (of UserOptions)						*
	*																*
	*																*
	****************************************************************/
	
	public String getCartridgeTitle()
		{
		return (m_cartridgeTitle) ;
		}

	
	/****************************************************************
	* NAME: isGBCCompatible (of UserOptions)						*
	*																*
	*																*
	****************************************************************/
	
	public boolean isGBCCompatible()
		{
		return (m_optGBCCompatibility) ;
		}
	

	/****************************************************************
	* NAME: isGBCOnly (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public boolean isGBCOnly()
		{
		return (m_optGBCOnly) ;
		}
	
	
	/****************************************************************
	* NAME: getROMImageFilename (of UserOptions)					*
	*																*
	*																*
	****************************************************************/
	
	public String getROMImageFilename()
		{
		return (m_romImageFilename) ;
		}
	
	
	/****************************************************************
	* NAME: getError (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public String getError()
		{
		return (m_errorMsg) ;
		}
	
	private void PrintOptionInfo(String info)
		{
		String paddedInfo ;
		
		paddedInfo = info ;
		for (int i=0; i<20; i++)
			{
			paddedInfo = " " + paddedInfo ;
			}
			
		System.out.println(paddedInfo) ;
		}
	
	private void PrintOption(String option, String usage)
		{
		String paddedOption ;
		
		paddedOption = option ;
		while (paddedOption.length() < 15)
			{
			paddedOption = paddedOption + " " ;
			}
			
		System.out.println("    -" + paddedOption + usage) ;
		}
	
	
	/****************************************************************
	* NAME: PrintUsage (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public void PrintUsage()
		{
		System.out.println(Version.getFixToolName() + " " + Version.ONZFIXVersion()) ;
		System.out.println("Usage: " + Version.getFixToolName() + " [options] image") ;
		System.out.println("Options:") ;
		PrintOption("h", "This text") ;
		PrintOption("q", "Quiet mode -- supress all output except errors") ;
		PrintOption("d", "Debug: Don't change image") ;
		PrintOption("m<hex value>", "Change RAM size of cartridge") ;
		PrintOption("p[<hex value>]", "Pad image to valid size") ;
		PrintOptionInfo("Pads to 32/64/128/256/512KB as appropriate") ;
		PrintOptionInfo("An optional hexadecimal pad value can be supplied") ;
		PrintOption("r", "Truncate image to valid size") ;
		PrintOptionInfo("Truncates to 32/64/128/256/512KB as appropriate") ;
		PrintOption("t<name>", "Change cartridge title field (" + k_MAX_CART_TITLE_LEN + " characters)") ;
		PrintOption("v", "Validate header") ;
		PrintOptionInfo("Corrects - Nintendo Character Area         (0x0104)") ;
		PrintOptionInfo("         - ROM type                        (0x0147)") ;
		PrintOptionInfo("         - ROM size                        (0x0148)") ;
		PrintOptionInfo("         - Checksums                       (0x014D-0x014F)") ;
		PrintOption("b<hex value>", "Set MBC type                               (0x0147)") ;
		PrintOption("c", "Set Colour GameBoy compatible (0x80) flag  (0x0143)") ;
		PrintOption("o", "Set Colour GameBoy only (0xC0) flag        (0x0143)") ;
		PrintOption("l", "Two Byte Licensee code                     (0x0144-0x0145)") ;
		PrintOption("s", "SGB Features                               (0x0146)") ;
		PrintOption("cc<hex value>", "Country Code                               (0x014A)") ;
		PrintOption("lc<hex value>", "Licensee Code                              (0x014B)") ;
		PrintOption("", "") ;
		}

	
	/****************************************************************
	* NAME: Process (of UserOptions)								*
	*																*
	*																*
	****************************************************************/
	
	public boolean Process(String[] args)
		{
		int	argIndex ;
		
		if (args.length == 0)
			{
			m_errorMsg = "No arguments specified" ;
			
			return (false) ;
			}
		
		for (argIndex=0; argIndex < args.length; argIndex++)
			{
			String	optionString ;
			String	optionParameter ;
			
			if (args[argIndex].charAt(0) == '-')
				{
				if (args[argIndex].length() == 1)
					{
					m_errorMsg = "Unrecognised command line option" ;
					
					return (false) ;
					}

				optionString = args[argIndex].substring(1, 2) ;
				if (args[argIndex].length() > 2)
					{
					optionParameter = args[argIndex].substring(2) ;
					}
				else
					{
					optionParameter = "" ;
					}
				
				if (optionString.equals("?") || optionString.equalsIgnoreCase("h"))
					{
					if (optionParameter.length() != 0)
						{
						m_errorMsg = "Help option does not take a parameter" ;
						
						return (false) ;
						}
					
					}
				else if (optionString.equalsIgnoreCase("d"))
					{
					if (optionParameter.length() != 0)
						{
						m_errorMsg = "Debug option does not take a parameter" ;
						
						return (false) ;
						}
					
					m_optDebugOnly = true ;
					}
				else if (optionString.equalsIgnoreCase("p"))
					{
					if (optionParameter.length()==0)
						{
						m_errorMsg = "Pad value must be specified" ;
						
						return (false) ;
						}
					
					try
						{
						long	value ;

						value = Short.valueOf(optionParameter, 16).longValue() ;
						if ((value < 0) || (value > 255))
							{
							m_errorMsg = "Pad value must be in the range of 00h to FFh" ;
							
							return (false) ;
							}
						
						m_padValue = (short)(value) ;
						}
					
					catch (NumberFormatException e)
						{
						m_errorMsg = "Pad value must be specified as a valid Hex number" ;
						
						return (false) ;
						}
					
					m_optPadImage = true ;
					}
				else if (optionString.equalsIgnoreCase("r"))
					{
					if (optionParameter.length() != 0)
						{
						m_errorMsg = "Truncate image option does not take a parameter" ;
						
						return (false) ;
						}
					
					m_optTruncateImage = true ;
					}
				else if (optionString.equalsIgnoreCase("v"))
					{
					if (optionParameter.length() != 0)
						{
						m_errorMsg = "Validate cartridge option does not take a parameter" ;
						
						return (false) ;
						}
					
					m_optValidateImage = true ;
					}
				else if (optionString.equalsIgnoreCase("t"))
					{
					if (optionParameter.length()==0)
						{
						m_errorMsg = "Cartridge title must be specified" ;
						
						return (false) ;
						}
					
					if (optionParameter.length() > k_MAX_CART_TITLE_LEN)
						{
						m_errorMsg = "Cartridge title length must be no more than " + k_MAX_CART_TITLE_LEN + " characters" ;
						
						return (false) ;
						}
					
					m_cartridgeTitle = optionParameter ;
					m_optCartTitle = true ;
					}
				else if (optionString.equalsIgnoreCase("b"))
					{
					if (optionParameter.length()==0)
						{
						m_errorMsg = "MBC Type must be specified" ;

						return (false) ;
						}
					
					try
						{
						long	value ;

						value = Short.valueOf(optionParameter, 16).longValue() ;
						if ((value < 0) || (value > 255))
							{
							m_errorMsg = "MBC Type must be in the range of 00h to FFh" ;
							
							return (false) ;
							}
						
						m_mbcType = (short)(value) ;
						}
					
					catch (NumberFormatException e)
						{
						m_errorMsg = "MBC Type value must be specified as a valid Hex number" ;
						
						return (false) ;
						}
					
					m_optMBCType = true ;
					}
				else if (optionString.equalsIgnoreCase("m"))
					{
					if (optionParameter.length()==0)
						{
						m_errorMsg =  "RAM Size must be specified" ;
						
						return (false) ;
						}
					
					try
						{
						long	value ;

						value = Short.valueOf(optionParameter, 16).longValue() ;
						if ((value < 0) || (value > 255))
							{
							m_errorMsg = "RAM Size must be in the range of 00h to FFh" ;
							
							return (false) ;
							}
						
						m_ramSize = (short)(value) ;
						}
					
					catch (NumberFormatException e)
						{
						m_errorMsg = "RAM Size value must be specified as a valid Hex number" ;
						
						return (false) ;
						}
					
					m_optRAMSize = true ;
					}
				else if (optionString.equalsIgnoreCase("c"))
					{
					if (optionParameter.length() != 0)
						{
						m_errorMsg = "GBC Compatibility option does not take a parameter" ;
						
						return (false) ;
						}
					
					m_optGBCCompatibility = true ;
					}
				else if (optionString.equalsIgnoreCase("o"))
					{
					if (optionParameter.length() != 0)
						{
						m_errorMsg = "GBC Only option does not take a parameter" ;
						
						return (false) ;
						}
					
					m_optGBCOnly = true ;
					}
				else
					{
					m_errorMsg = "Unrecognised command line option" ;
					
					return (false) ;
					}
						
				}
			else
				{
				if (argIndex != (args.length-1))
					{
					m_errorMsg = "ROM image filename must be the last option" ;
					
					return (false) ;
					}
				
				m_romImageFilename = args[argIndex] ;
				}
			
			}
	
		if (m_optGBCOnly && m_optGBCCompatibility)
			{
			m_errorMsg = "Cannot be both GameBoy Colour Only and GameBoy Colour Compatible" ;
			
			return (false) ;
			}
		
		if (m_romImageFilename.length() == 0)
			{
			m_errorMsg = "No ROM image file was specified" ;
				
			return (false) ;
			}
		
		return (true) ;
		}

	}
